/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "stdio.h"

#define ONE 	0b1001111
#define TWO 	0b0100100
#define THREE 	0b0110000
#define FOUR 	0b0011001
#define FIVE 	0b0010010
#define SIX 	0b0000010
#define SEVEN 	0b1111000
#define EIGHT 	0b0000000
#define NINE 	0b0011000
#define ZERO	0b1000000

#define SEGS 3

int convert_to_7seg(int input);
int display_7seg(int lo, int number);
int read_timer_interval(void);
void find_primes(void);




int main()
{ 
  alt_putstr("Hello from Nios II!\n");

  IOWR_ALTERA_AVALON_PIO_DATA(SEG_LO_BASE, ZERO);

  find_primes();

  read_timer_interval();

  /* Event loop never exits. */
  while (1);

  return 0;
}

void find_primes(void){
	int curr = 2;
	while(1){
		for(int i = 2; i < curr; i++){
			if(curr % i == 0){
				curr++;
				break;
			}
		}

		display_7seg(1, curr % 1000);
		display_7seg(0, curr / 1000);
	}
}

int read_timer_interval(void)
{
	printf("1 \n");
	int switches = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
	printf("switches %i \n", switches);


	return switches;

}

int display_7seg(int lo, int number)
{
	if (lo)
	{
		int digit[3];
		digit[0] = ZERO;
		digit[1] = ZERO;
		digit[2] = ZERO;
		int ctr = 0;
		int seg_num = 0;

		while(number > 0)
		{
			printf("digit: %i", digit[ctr]);
			digit[ctr] = convert_to_7seg(number % 10);
			number /= 10;
			ctr++;
		}

		for (int i = 0; i < SEGS; i++){
			seg_num += digit[i] << (7 * i);
		}

		printf("segnum: %i \n", seg_num);
		IOWR_ALTERA_AVALON_PIO_DATA(SEG_LO_BASE, seg_num);

		return 1;
	} else
	{
		int digit[3];
		digit[0] = ZERO;
		digit[1] = ZERO;
		digit[2] = ZERO;
		int ctr = 0;
		int seg_num = 0;

		while(number > 0)
		{
			printf("digit: %i", digit[ctr]);
			digit[ctr] = convert_to_7seg(number % 10);
			number /= 10;
			ctr++;
		}

		for (int i = 0; i < SEGS; i++){
			seg_num += digit[i] << (7 * i);
		}

		printf("segnum: %i \n", seg_num);
		IOWR_ALTERA_AVALON_PIO_DATA(SEG_HI_BASE, seg_num);

		return 1;
	}



}

int convert_to_7seg(int input)
{
	switch(input)
	{
	case 0:
		return ZERO;
	case 1:
		return ONE;
	case 2:
		return TWO;
	case 3:
		return THREE;
	case 4:
		return FOUR;
	case 5:
		return FIVE;
	case 6:
		return SIX;
	case 7:
		return SEVEN;
	case 8:
		return EIGHT;
	case 9:
		return NINE;
	default:
		return -1;
	}
}
