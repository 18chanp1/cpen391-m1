/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "stdio.h"

#define ONE 207
#define TWO 164
#define THREE 176
#define FOUR 153
#define FIVE 146
#define SIX 2
#define SEVEN 120
#define EIGHT 0
#define NINE 24
#define ZERO 64

#define SEVEN_SEG_QTY 3

//int write_number(int lo, int number);

int main()
{ 
//  alt_putstr("Hello from Nios II!\n");
//  printf("test\n");

  IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, 1);
  //write_number(1, 92);

  /* Event loop never exits. */
  while (1);

  return 0;
}

//int write_number(int lo, int number)
//{
//	if(number > 999){
//		return 0;
//	}
//
//	if(lo){
//		long seven_seg_number = 0;
//		int digits[SEVEN_SEG_QTY];
//		digits[2] = ZERO;
//		digits[1] = ZERO;
//		digits[0] = ZERO;
//		int ctr = 0;
//		while (number)
//		{
//			digits[ctr] = number % 10;
//
//			switch (digits[ctr])
//			{
//				case 0:
//					digits[ctr] = ZERO;
//					break;
//				case 1:
//					digits[ctr] = ONE;
//					break;
//				case 2:
//					digits[ctr] = TWO;
//					break;
//				case 3:
//					digits[ctr] = THREE;
//					break;
//				case 4:
//					digits[ctr] = FOUR;
//					break;
//				case 5:
//					digits[ctr] = FIVE;
//					break;
//				case 6:
//					digits[ctr] = SIX;
//					break;
//				case 7:
//					digits[ctr] = SEVEN;
//					break;
//				case 8:
//					digits[ctr] = EIGHT;
//					break;
//				case 9:
//					digits[ctr] = NINE;
//					break;
//			}
//			ctr++;
//			number /= 10;
//		}
//
//		for(int i = SEVEN_SEG_QTY - 1; i >= 0 ; i--){
//			printf("digits : %i \n", digits[i]);
//			if(i == 0){
//				seven_seg_number += digits[i];
//				printf("digits : %i \n", digits[i]);
//			}
//			else if(i == 1){
//				digits[i] = (digits[i] - 1 << 7);
//				seven_seg_number += digits[i];
//				printf("digits : %i \n", digits[i]);
//			} else if(i == 2){
//				digits[i] = digits[i] << 14;
//				seven_seg_number += digits[i];
//				printf("digits : %i \n", digits[i]);
//			}
//		}
//
//		printf("%i \n", seven_seg_number);
//
//		IOWR_ALTERA_AVALON_PIO_DATA(SEG_LO_BASE, seven_seg_number);
//
//
//		return 1;
//	}
//}
